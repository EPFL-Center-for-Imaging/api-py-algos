import numpy as np
import pytest
from geojson import Feature

from app.features import get_features_from_segm_mask


@pytest.fixture()
def segm_mask() -> np.ndarray:
    # Small mask with 2 cells with indices 148 and 240
    return np.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0,
                      240.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0,
                      240.0, 240.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0,
                      240.0, 240.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0,
                      240.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0,
                      240.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 240.0, 240.0, 240.0, 240.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0, 148.0, 148.0, 148.0, 148.0, 148.0, 148.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0],
                     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0],
                     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      0.0]])


@pytest.fixture()
def features_ref() -> [Feature]:
    return [{"geometry": {"coordinates": [
        [[8.0, 19.5], [7.0, 19.5], [6.0, 19.5], [5.0, 19.5], [4.0, 19.5], [3.0, 19.5], [2.5, 19.0], [2.0, 18.5],
         [1.5, 18.0], [1.5, 17.0], [1.5, 16.0], [1.5, 15.0], [1.5, 14.0], [1.0, 13.5], [0.5, 13.0], [0.5, 12.0],
         [1.0, 11.5], [1.5, 11.0], [1.0, 10.5], [0.5, 10.0], [0.5, 9.0], [0.5, 8.0], [0.5, 7.0], [0.5, 6.0], [0.5, 5.0],
         [1.0, 4.5], [1.5, 4.0], [1.5, 3.0], [2.0, 2.5], [2.5, 2.0], [3.0, 1.5], [4.0, 1.5], [5.0, 1.5], [6.0, 1.5],
         [7.0, 1.5], [8.0, 1.5], [8.5, 2.0], [9.0, 2.5], [9.5, 3.0], [10.0, 3.5], [10.5, 4.0], [11.0, 4.5], [11.5, 5.0],
         [11.5, 6.0], [12.0, 6.5], [12.5, 7.0], [12.5, 8.0], [12.5, 9.0], [13.0, 9.5], [13.5, 10.0], [13.0, 10.5],
         [12.5, 11.0], [12.5, 12.0], [12.5, 13.0], [12.5, 14.0], [12.0, 14.5], [11.5, 15.0], [11.5, 16.0], [11.0, 16.5],
         [10.5, 17.0], [10.0, 17.5], [9.5, 18.0], [9.0, 18.5], [8.5, 19.0], [8.0, 19.5]]], "type": "Polygon"},
        "properties": {"label": "object"}, "type": "Feature"},
        {"geometry": {"coordinates": [
            [[29.0, 8.5], [28.0, 8.5], [27.0, 8.5], [26.0, 8.5], [25.5, 8.0], [25.0, 7.5], [24.5, 7.0], [24.0, 6.5],
             [23.5, 6.0], [23.5, 5.0], [23.0, 4.5], [22.0, 4.5], [21.5, 4.0], [21.0, 3.5], [20.5, 3.0], [20.5, 2.0],
             [20.5, 1.0], [20.5, 0.0], [21.0, -0.5], [22.0, -0.5], [23.0, -0.5], [24.0, -0.5], [25.0, -0.5],
             [26.0, -0.5], [27.0, -0.5], [28.0, -0.5], [29.0, -0.5], [30.0, -0.5], [31.0, -0.5], [31.5, 0.0],
             [32.0, 0.5], [32.5, 1.0], [32.5, 2.0], [32.5, 3.0], [32.5, 4.0], [32.0, 4.5], [31.5, 5.0], [31.5, 6.0],
             [31.0, 6.5], [30.5, 7.0], [30.0, 7.5], [29.5, 8.0], [29.0, 8.5]]], "type": "Polygon"},
            "properties": {"label": "object"}, "type": "Feature"}
    ]


def test_get_features_from_segm_mask(segm_mask: np.ndarray, features_ref: [Feature]):
    features = get_features_from_segm_mask(segm_mask)
    assert len(features) == 2, "Unexpected number of features"
    for feature, feature_ref in zip(features, features_ref):
        geom = feature.get("geometry")
        assert geom is not None, "Missing 'geometry' key in Feature"
        geom_ref = feature_ref.get("geometry")
        assert np.allclose(geom.get("coordinates"), geom_ref.get("coordinates")), \
            "Unequal coordinates values for the detected feature's geometry"
